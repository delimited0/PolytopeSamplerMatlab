dat <- MASS::mvrnorm(n, mu = c(0, -2), Sigma = Sigma)
plot(dat, pch = 19, xlim = c(-3, 3), ylim = c(-5, 1))
set.seed(1)
n <- 100
r <- -.75
Sigma <- matrix(c(1, r, r, 1), nrow = 2)
dat <- MASS::mvrnorm(n, mu = c(0, -2), Sigma = Sigma)
plot(dat, pch = 19, xlim = c(-3, 3), ylim = c(-5, 1))
set.seed(1)
n <- 100
r <- -.75
Sigma <- matrix(c(1, r, r, 1), nrow = 2)
dat <- MASS::mvrnorm(n, mu = c(0, -2), Sigma = Sigma)
plot(dat, pch = 19, xlim = c(-3, 3), ylim = c(-5, 1))
fit <- lm(x = dat[, 1], y = dat[,2])
data.frame(dat)
colnames(data.frame(dat))
fit <- lm(X2 ~ X1, data = dat)
fit <- lm(X2 ~ X1, data = data.frame(dat))
set.seed(1)
n <- 100
r <- -.75
Sigma <- matrix(c(1, r, r, 1), nrow = 2)
dat <- MASS::mvrnorm(n, mu = c(0, -2), Sigma = Sigma)
plot(dat, pch = 19, xlim = c(-3, 3), ylim = c(-5, 1), xlab = "x", ylab = "y")
fit <- lm(X2 ~ X1, data = data.frame(dat))
fit <- lm(X2 ~ X1, data = data.frame(dat))
fit
set.seed(1)
n <- 100
r <- -.75
Sigma <- matrix(c(1, r, r, 1), nrow = 2)
dat <- MASS::mvrnorm(n, mu = c(0, -2), Sigma = Sigma)
plot(dat, pch = 19, xlim = c(-3, 3), ylim = c(-5, 1), xlab = "x", ylab = "y")
fit <- lm(X2 ~ X1, data = data.frame(dat))
fit
set.seed(1)
n <- 100
r <- -.75
Sigma <- matrix(c(1, r, r, 1), nrow = 2)
dat <- MASS::mvrnorm(n, mu = c(0, -2), Sigma = Sigma)
plot(dat, pch = 19, xlim = c(-3, 3), ylim = c(-5, 1), xlab = "x", ylab = "y",
cex = .5)
fit <- lm(X2 ~ X1, data = data.frame(dat))
600 * .85
exp(1.6)
1.6 / .6
exp(1.1)
exp(1.6)
exp(.5)
recovery
recovery <- data.frame(LASIK = c(63, 64, 98, 80, 89, 85),
RLE =   c(50, 57, 95, 70, 85, 89))
lm(LASIK - RLE ~ 1, data = recovery)
recovery <- data.frame(LASIK = c(63, 64, 98, 80, 89, 85),
RLE =   c(50, 57, 95, 70, 85, 89))
fit <- lm(LASIK - RLE ~ 1, data = recovery)
summary(fit)
recovery <- data.frame(LASIK = c(63, 64, 98, 80, 89, 85),
RLE =   c(50, 57, 95, 70, 85, 89))
fit <- lm(LASIK - RLE ~ 1, data = recovery)
summary(fit)
qt(.975, 4)
qt(.975, 5)
library(benchmarkme)
get_available_benchmarks()
plot.ben_results()
sample_results
data(past_results_v2, package = "benchmarkmeData")
force(past_results_v2)
View(past_results_v2)
data(past_results, package = "benchmarkmeData")
force(past_results)
View(past_results)
View(past_results_v2)
sigmoid <- function(x) {
exp_term <- exp(10 * (x + 1))
(exp_term / (1 + exp_term))
}
xseq <- seq(-2, 2, .01)
plot(xseq, sigmoid(xseq), type = "l")
sigmoid <- function(x, eta = 10) {
exp_term <- exp(eta * (x + 1))
(exp_term / (1 + exp_term))
}
xseq <- seq(-2, 2, .01)
plot(xseq, sigmoid(xseq), type = "l")
plot(xseq, sigmoid(xseq, 20), type = "l")
plot(xseq, sigmoid(xseq, 100), type = "l")
sigmoid <- function(x, eta = 10) {
exp_term <- exp(eta * (x + 1))
(exp_term / (1 + exp_term)) * (1 / (1 + exp_term))
}
sigmoid <- function(x, eta = 10) {
exp_term <- exp(eta * (x + 1))
(exp_term / (1 + exp_term)) * (1 / (1 + exp_term))
}
xseq <- seq(-2, 2, .01)
plot(xseq, sigmoid(xseq, 100), type = "l")
sigmoid <- function(x, a, b, eta = 10) {
exp_term_a <- exp(eta * (x - a))
exp_term_b <- exp(eta * (x - b))
(exp_term_a / (1 + exp_term_a)) * (1 / (1 + exp_term_b))
}
xseq <- seq(-2, 2, .01)
plot(xseq, sigmoid(xseq, 100), type = "l")
plot(xseq, sigmoid(xseq, -1, 1, 100), type = "l")
sigmoid(-2, -1, 1, 100)
Sys.Date()
if (5 < 3) {
print("this is true")
}
if (5 < 3) {
print("this is true")
}
else {
print("this is false")
}
if (5 < 3) {
print("this is true")
}
else {
print("this is false")
}
is.null()
windspeed[1,1]
library(tint)
set.seed(1)
# invalidate cache when the package version changes
# knitr::opts_chunk$set(tidy = FALSE, cache.extra = packageVersion('tint'))
# options(htmltools.dir.version = FALSE)
r_squareds = rep(NA, 5)
max_degree = length(r_squareds)
y = windspeed$output
windspeed = read.table("WindSpeed.txt")
y = windspeed$output
x = windspeed$speed
r_squareds = rep(NA, 5)
max_degree = length(r_squareds)
y = windspeed$output
x = windspeed$speed
for (i in 1:max_degree) {
fit <- lm(y ~ x)
r_squareds[i] <- summary(fit)$r.squared
}
r_squareds
r_squareds = rep(NA, 5)
max_degree = length(r_squareds)
y = windspeed$output
x = windspeed$speed
for (i in 1:max_degree) {
fit <- lm(y ~ poly(x, degree = i))
r_squareds[i] <- summary(fit)$r.squared
}
r_squareds
3 in 1:3
3 %in% 1:3
set.seed(3)
x = (1:30 - .5) / 30
y = 11.8 + 28 * x - 70 * x^2 + 50 * x^3 + rnorm(length(x))
plot(x, y, pch=19)
curve(11.8 + 28 * x - 70 * x^2 + 50 * x^3, 0, 1)
set.seed(3)
x = (1:30 - .5) / 30
y = 11.8 + 28 * x - 70 * x^2 + 50 * x^3 + rnorm(length(x))
plot(x, y, pch=19)
curve(11.8 + 28 * x - 70 * x^2 + 50 * x^3, 0, 1, new = FALSE)
plot(x, y, pch=19)
curve(11.8 + 28 * x - 70 * x^2 + 50 * x^3, 0, 1, new = FALSE)
set.seed(3)
x = (1:30 - .5) / 30
y = 11.8 + 28 * x - 70 * x^2 + 50 * x^3 + rnorm(length(x))
plot(x, y, pch=19)
curve(11.8 + 28 * x - 70 * x^2 + 50 * x^3, 0, 1, add = TRUE)
set.seed(3)
x = (1:30 - .5) / 30
y = 11.8 + 28 * x - 70 * x^2 + 50 * x^3 + rnorm(length(x))
plot(x, y, pch=19)
curve(11.8 + 28 * x - 70 * x^2 + 50 * x^3, 0, 1, add = TRUE, col="blue")
?curve
plot(1, type = "n", xlim = c(0, 1), ylim = c(10, 22),
main = "Degree = 2")
replicate(50, {
x = (1:30 - .5) / 30
y = 11.8 + 28 * x - 70 * x^2 + 50 * x^3 + rnorm(length(x))
fit = lm(y ~ poly(x, degree = 2, raw = TRUE))
x_grid = seq(0, 1, .01)
X = cbind(1, poly(x_grid, degree = 2, raw = TRUE))
yhat = X %*% fit$coefficients
lines(x_grid, yhat)
})
plot(x, y)
y = windspeed$output
x = windspeed$speed
output <- AICpoly(x, y)
AICpoly = function(x, y, kmax){
# Given regression data (x,y), this function calculates AIC,
# BIC, and adjusted R^2 for polynomial models of degree 1
# to kmax.
#
# The AIC and BIC criteria are plotted, and the minimizers
# indicated by vertical lines.  If there is only one
# verticalline, then both criteria are minimized at the
# same k.
#
# The output is a list containing the AIC values, BIC
# values, values of adjusted R^2, and the respective
# optimizers of the three criteria.
adjr2 = 1:kmax
aic = 1:kmax
bic = 1:kmax
n=length(y)
for(k in 1:kmax){
fit = lm(y~poly(x,k))
aic[k] = AIC(fit)
bic[k] = AIC(fit,k=log(n))
adjr2[k] = summary(fit)$adj
}
kr2 = (1:kmax)[adjr2==max(adjr2)]
kaic = (1:kmax)[aic==min(aic)]
kbic = (1:kmax)[bic==min(bic)]
ylim = range(c(aic,bic))
plot(1:k, aic, xlab='k', ylab='aic/bic',
ylim=ylim, col='red')
points(1:k,bic, col='blue')
abline(v=kaic, col='red')
abline(v=kbic, col='blue')
title("Red points: AIC  Blue points: BIC")
list(aic, bic, adjr2, kaic, kbic, kr2)
}
y = windspeed$output
x = windspeed$speed
output <- AICpoly(x, y)
y = windspeed$output
x = windspeed$speed
output <- AICpoly(x, y, kmax = 10)
summary(fit_poly)
# using poly
fit_poly = lm(y ~ poly(x, 2, raw=TRUE))
# using I
fit_I = lm(y ~ x + I(x^2))
# not setting raw=TRUE,
fit_poly_orthogonal = lm(y ~ poly(x, 2))
coef(fit_poly)
coef(fit_poly_orthogonal)
plot(x, y)
lines(x, fit_poly$fitted.values, col = "red",
lwd = 3, lty = 2, )
lines(x, fit_poly_orthogonal$fitted.values,
col = "blue", lwd = 3, lty = 3)
legend("bottomright", c("Raw", "Orthogonal"),
col = c("red", "blue"), lty = c(2, 3))
summary(fit_poly)
confint(fit_poly)
summary(fit_poly)
confint(fit_poly)
confint(fit_poly_orthogonal)
x_new = data.frame(speed = c(3, 5, 7))
predict(fit_poly, x_new)
x_new = data.frame(speed = c(3, 5, 7))
predict(fit_poly, poly(x_new, degree = 2))
predict(fit_poly, x_new)
predict(fit_poly, x_new, type = "response")
x_new
windspeed
fit_poly
x_new = poly(x_new, degree = 2, raw = TRUE)
)
x_new = poly(x_new, degree = 2, raw = TRUE)
x_new = data.frame(speed = c(3, 5, 7)
predict(fit_poly, x_new, type = "response")
x_new = data.frame(speed = c(3, 5, 7))
x_new = poly(x_new, degree = 2, raw = TRUE)
x_new
x_new = c(3, 5, 7)
x_new = poly(x_new, degree = 2, raw = TRUE)
x_new
x_new = data.frame(x_new)
x_new
predict(fit_poly, x_new, type = "response")
x_new = data.frame(speed = c(3, 5, 7))
# x_new = poly(x_new, degree = 2, raw = TRUE)
# x_new = data.frame(x_new)
predict(fit_poly, x_new)
x_new = data.frame(x = c(3, 5, 7))
# x_new = poly(x_new, degree = 2, raw = TRUE)
# x_new = data.frame(x_new)
predict(fit_poly, x_new)
n <- 1000
d <- 2000
mu <- rep(0, d)
Sigma <- diag(d)
lb <- rep(0, d)
ub <- rep(Inf, d)
tic()
botev_samples <- TruncatedNormal::rtmvnorm(n, mu, Sigma, lb, ub)
botev_time <- toc()
library(tmg)
library(TruncatedNormal)
library(tictoc)
library(tmg)
library(TruncatedNormal)
library(tictoc)
n <- 1000
d <- 2000
mu <- rep(0, d)
Sigma <- diag(d)
lb <- rep(0, d)
ub <- rep(Inf, d)
tic()
botev_samples <- TruncatedNormal::rtmvnorm(n, mu, Sigma, lb, ub)
botev_time <- toc()
n <- 1000
d <- 3000
mu <- rep(0, d)
Sigma <- diag(d)
lb <- rep(0, d)
ub <- rep(Inf, d)
tic()
botev_samples <- TruncatedNormal::rtmvnorm(n, mu, Sigma, lb, ub)
botev_time <- toc()
setwd("~/Research/PolytopeSamplerMatlab")
library(tmg)
library(TruncatedNormal)
library(cdists)
library(tictoc)
library(data.table)
# ptnorm <- function(x, lb = -Inf, ub = Inf) {
#   # 1d truncated normal
#   truncdist::ptrunc(x, spec = "norm", a = lb, b = ub)
# }
n <- 1000
dimensions <- c(100, 500, 1000, 2000, 4000)
# Identity covariance
esses <- vector(mode = "list", length = length(dimensions))
names(esses) <- dimensions
samples <- vector(mode = "list", length = length(dimensions))
names(samples) <- dimensions
times <- vector(mode = "list", length = length(dimensions))
names(times) <- dimensions
dists <- vector(mode = "list", length = length(dimensions))
names(dists) <- dimensions
set.seed(1)
uni_sample <- tmvtnorm::rtmvnorm(n, 0, 1, 0)
for (d in dimensions) {
print(paste("--- Dimension ", d, " ---"))
mu <- rep(0, d)
Sigma <- diag(d)
lb <- rep(0, d)
ub <- rep(Inf, d)
print("Botev")
tic()
botev_samples <- TruncatedNormal::rtmvnorm(n, mu, Sigma, lb, ub)
botev_time <- toc()
botev_ess <- coda::effectiveSize(t(botev_samples))
botev_dist <- apply(botev_samples, 2,
function(samp) ks.test(samp, uni_sample)$statistic)
print("Exact")
tic()
exact_samples <- cdists::rtmvn(n, Sigma, mu, lb, ub)
exact_time <- toc()
exact_ess <- coda::effectiveSize(exact_samples)
exact_dist <- apply(exact_samples, 2,
function(samp) ks.test(samp, uni_sample)$statistic)
entry_name <- as.character(d)
esses[[entry_name]] <- data.frame(botev = botev_ess, exact = exact_ess,
d = d, dim_idx = 1:d)
times[[entry_name]] <- data.frame(
botev = with(botev_time, toc - tic),
exact = with(exact_time, toc - tic), d = d)
dists[[entry_name]] <- data.frame(botev = botev_dist, exact = exact_dist,
d = d, dim_idx = 1:d)
}
dim(exact_samples)
library(ggplot2)
dist_df <- do.call(rbind, dists)
dist_df <- melt(data.table(dist_df[, -4]), id.vars = "d")
times_df <- melt(data.table(do.call(rbind, times)), id.vars = "d")
ggplot(dist_df, aes(x = variable, y = value)) +
geom_violin() +
facet_wrap(vars(d), scales = "free")
ggplot(dist_df, aes(x = dim_idx, y = botev)) +
geom_point() +
facet_wrap(vars(d), scales = "free")
ggplot(times_df, aes(x = d, y = value, color = variable)) +
geom_point(size = 3) + geom_line() +
labs(x = "Dimension", y = "Seconds") +
theme(legend.title = element_blank())
dim(botev_sample)
dim(botev_samples)
dim(exact_dist)
length(exact_dist)
exact_time
times_df
foo <- R.matlab::readMat("rhmc_2020_2_12.mat")
foo[[1]]
foo[[2]]
foo <- R.matlab::readMat("rhmc_2020_2_12.mat")
foo[[1]]
foo[[2]]
names(foo)
rhmc <- R.matlab::readMat("rhmc_2020_2_12.mat")
rhmc$samples[[1]]
sapply(rhmc$samples, function(s) t(s))
sapply(rhmc$samples, function(s) dim(t(s)))
rhmc_samples[[1]]
rhmc$samples[[1]]
dim(rhmc$samples[[1]])
class(rhmc$samples[[1]])
length(rhmc$samples[[1]])
rhmc$samples[[1]][[1]]
dim(rhmc$samples[[1]][[1]])
dim(rhmc$samples[[1]][[2]])
rhmc <- R.matlab::readMat("rhmc_2020_2_12.mat")
rhmc$samples[[1]]
dim(rhmc$samples[[1]])
rhmc$samples[[1]][[1]]
sapply(rhmc$samples, function(x) x[[1]][[1]])
sapply(rhmc$samples, function(x) x[[1]])
length(rhmc_samples)
length(rhmc$samples)
rhmc <- R.matlab::readMat("rhmc_2020_2_12.mat")
sapply(rhmc$samples, function(x) x[[1]])
sapply(rhmc$samples, function(x) t(x[[1]]))
sapply(rhmc$samples, function(x) dim(t(x[[1]])))
sapply(rhmc$samples, function(x) rbind(t(x[[1]]), ncol(x[[1]])))
rhmc_samples <-
sapply(rhmc$samples, function(x) rbind(t(x[[1]]), ncol(x[[1]])))
rhmc_samples <- do.call(rbind, rhmc_samples)
dist_df
dists
dists[[1]]
length(rhmc_samples)
rhmc_samples[[1]]
dim(rhmc_samples[[1]])
dim(rhmc_samples[[2]])
dim(rhmc_samples[[3]])
rhmc$times
ggplot(times_df, aes(x = d, y = value, color = variable)) +
geom_point(size = 3) + geom_line() +
labs(x = "Dimension", y = "Seconds") +
theme(legend.title = element_blank()) +
geom_point(data = rhmc$times)
data.frame(rhmc$times)
ggplot(times_df, aes(x = d, y = value, color = variable)) +
geom_point(size = 3) + geom_line() +
labs(x = "Dimension", y = "Seconds") +
theme(legend.title = element_blank()) +
geom_point(data = data.frame(rhmc = rhmc$times))
rhmc_time_df <- data.frame(rhmc = rhmc$times, d = dimensions)
ggplot(times_df, aes(x = d, y = value, color = variable)) +
geom_point(size = 3) + geom_line() +
labs(x = "Dimension", y = "Seconds") +
theme(legend.title = element_blank()) +
geom_point(data = rhmc_time_df, aes(x = d, y = rhmc))
ggplot(times_df, aes(x = d, y = value, color = variable)) +
geom_point(size = 3) + geom_line() +
labs(x = "Dimension", y = "Seconds") +
theme(legend.title = element_blank()) +
geom_point(data = rhmc_time_df, aes(x = d, y = rhmc))
times_df
rhmc_time_df
rhmc_time_df <-
data.frame(variable = "rhmc", value = rhmc$times, d = dimensions)
rhmc_time_df
rbind(rhmc_time_df, times_df)
ggplot(rbind(rhmc_time_df, times_df),
aes(x = d, y = value, color = variable)) +
geom_point(size = 3) + geom_line() +
labs(x = "Dimension", y = "Seconds") +
theme(legend.title = element_blank()) +
geom_point(data = rhmc_time_df, aes(x = d, y = rhmc))
ggplot(rbind(rhmc_time_df, times_df),
aes(x = d, y = value, color = variable)) +
geom_point(size = 3) + geom_line() +
labs(x = "Dimension", y = "Seconds") +
theme(legend.title = element_blank())
rhmc_samples
rhmc_samples[[1]]
head(rhmc_samples[[1]])
sapply(rhmc_samples, function(x) apply(x, 2, function(samp) ks.test(samp, uni_sample)$statistic))
rhmc_dist <- sapply(rhmc_samples, function(x) {
apply(x, 2, function(samp) {
ks.test(samp, uni_sample)$statistic
})
})
rhmc_dist[[1]]
rhmc_dist <- mapply(function(x, d) {
apply(x, 2, function(samp) {
data.frame(rhmc = ks.test(samp, uni_sample)$statistic, d = d,
dim_idx = 1:d)
})
}, rhmc_samples, dimensions)
warnings()
rhmc_dist[[1]]
rhmc_dist[[2]]
dim(rhmc_dist[[2]])
rhmc_samples[[5]]
dim(rhmc_samples[[5]])
colMeans(rhmc_samples[[5]]))
colMeans(rhmc_samples[[5]])
rhmc_dist <- sapply(rhmc_samples, function(x) {
apply(x, 2, function(samp)
ks.test(samp, uni_sample)$statistic)
})
rhmc_dist[[1]]
rhmc_dist[[2]]
rhmc_dist[[3]]
rhmc_dist[[4]]
rhmc_dist[[5]]
save("experiments_2020_2_13.RData", esses, samples, times, dists)
save(esses, samples, times, dists, file = "experiments_2020_2_13.RData")
