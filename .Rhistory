waits <- rexp(100, 3)
hist(waits, breaks = "FD", main = "Waiting Times, n = 100",
probability = TRUE)
lambda_hat <- mean(waits)
x <- seq(0, 1.5, .01)
lines(x, dexp(x, rate = lambda_hat))
waits <- rexp(100, 3)
hist(waits, breaks = "FD", main = "Waiting Times, n = 100",
probability = TRUE)
lambda_hat <- 1 / mean(waits)
x <- seq(0, 1.5, .01)
lines(x, dexp(x, rate = lambda_hat))
set.seed(1)
n <- 100
waits <- rexp(100, 3)
hist(waits, breaks = "FD", main = "Waiting Times, n = 100",
probability = TRUE)
hist(waits, breaks = "FD", main = "Waiting Times, n = 100",
probability = TRUE)
lambda_hat <- 1 / mean(waits)
x <- seq(0, 1.5, .01)
lines(x, dexp(x, rate = lambda_hat))
hist(waits, breaks = "FD", main = "Waiting Times, n = 100",
probability = TRUE)
lambda_hat <- 1 / mean(waits)
x <- seq(0, 1.5, .01)
lines(x, dexp(x, rate = lambda_hat), col = "red", lwd = 2)
hist(waits, breaks = "FD", main = "MLE fit",
probability = TRUE)
lambda_hat <- 1 / mean(waits)
x <- seq(0, 1.5, .01)
lines(x, dexp(x, rate = lambda_hat), col = "red", lwd = 2)
points(1/3, 0, pch = 19)
hist(waits, breaks = "FD", main = "MLE fit",
probability = TRUE, lwd = 1.5)
samp <- runif(100, 0, 4)
hist(samp, xlab = "x", breaks = "FD")
x <- seq(-2, 2)
plot(x, x >= 0)
x <- seq(-2, 2, .01)
plot(x, x >= 0)
x <- seq(-2, 2, .01)
plot(x, x >= 0, type = "h")
x <- seq(-2, 2, .01)
plot(x, x >= 0, type = "s")
x <- seq(-2, 2, .01)
plot(x, x >= 0, type = "s", lwd = 2)
x <- seq(-2, 2, .01)
plot(x, x >= 0, type = "s", lwd = 2, ylab = "",
main = "1(x >= 0)")
expression("theta")
x <- seq(-2, 2, .01)
plot(x, x >= 0, type = "s", lwd = 2, ylab = "",
main = "expression(1(x >= 0))")
x <- seq(-2, 2, .01)
plot(x, x >= 0, type = "s", lwd = 2, ylab = "",
main = "expression(paste0(1, (x >= 0)))")
x <- seq(-2, 2, .01)
plot(x, x >= 0, type = "s", lwd = 2, ylab = "",
main = expression(paste0(1, (x >= 0))))
x <- seq(-2, 2, .01)
plot(x, x >= 0, type = "s", lwd = 2, ylab = "",
main = expression(1(x >= 0))))
x <- seq(-2, 2, .01)
plot(x, x >= 0, type = "s", lwd = 2, ylab = "",
main = expression(1(x >= 0)))
max_x <- max(samp)
thetas <- seq(0, max_x + 4)
plot(thetas, 1/thetas)
max_x <- max(samp)
thetas <- seq(0, max_x + 4, .1)
plot(thetas, 1/thetas)
max_x <- max(samp)
thetas <- seq(0, max_x + 2, .1)
plot(thetas, 1/thetas)
max_x <- max(samp)
thetas <- seq(0, max_x + .1, .1)
plot(thetas, 1/thetas)
max(X)
knitr::opts_chunk$set(echo = TRUE)
source("orthant-estimation/orthant.R")
d <- 12
thresh <- 0
mu <- rep(0, d)
Sigma <- 0.5*diag(d)+ 0.5*rep(1,d)%*%t(rep(1,d))
reps <- 30
ag_estimates_budget <- replicate(reps, {
init_t <- anMC::get_chronotime()
estimate <- recursive_estimate(mu, Sigma, thresh, ag_chunks,
budget = rep(1, 2))
c("estimate" = estimate, "time" = (anMC::get_chronotime() - init_t) * 1e-9)
})
d <- 12
thresh <- 0
mu <- rep(0, d)
Sigma <- 0.5*diag(d)+ 0.5*rep(1,d)%*%t(rep(1,d))
reps <- 30
ag_chunks <- list(1:(d/2), ((d/2)+1):d)
rs_chunks <- list(1:(d/3), ((d/3)+1):(2*d/3), ((2*d/3)+1):d)
ag_estimates_budget <- replicate(reps, {
init_t <- anMC::get_chronotime()
estimate <- recursive_estimate(mu, Sigma, thresh, ag_chunks,
budget = rep(1, 2))
c("estimate" = estimate, "time" = (anMC::get_chronotime() - init_t) * 1e-9)
})
rs_chunks <- list(1:3, 4:6, 7:9, 10:12)
rs_estimates_budget <- replicate(reps, {
init_t <- anMC::get_chronotime()
estimate = recursive_estimate(mu, Sigma, thresh, rs_chunks,
budget = rep(.01, 4))
c("estimate" = estimate, "time" = (anMC::get_chronotime() - init_t) * 1e-9)
})
boxplot(unlist(ag_estimates_budget["estimate.estimate",]),
unlist(rs_estimates_budget["estimate.estimate",]),
main = "Estimated P(max X > t)",
names = c("2 split", "3 split"))
boxplot(unlist(ag_estimates_budget["time",]),
unlist(rs_estimates_budget["time",]),
main = "Runtimes",
names = c("2 split", "3 split"))
rs_chunks <- list(1:3, 4:6, 7:9, 10:12)
rs_estimates_budget <- replicate(reps, {
init_t <- anMC::get_chronotime()
estimate = recursive_estimate(mu, Sigma, thresh, rs_chunks,
budget = rep(.001, 4))
c("estimate" = estimate, "time" = (anMC::get_chronotime() - init_t) * 1e-9)
})
boxplot(unlist(ag_estimates_budget["estimate.estimate",]),
unlist(rs_estimates_budget["estimate.estimate",]),
main = "Estimated P(max X > t)",
names = c("2 split", "3 split"))
boxplot(unlist(ag_estimates_budget["time",]),
unlist(rs_estimates_budget["time",]),
main = "Runtimes",
names = c("2 split", "3 split"))
ag_estimates_budget <- replicate(reps, {
init_t <- anMC::get_chronotime()
estimate <- recursive_estimate(mu, Sigma, thresh, ag_chunks,
budget = rep(10, 2))
c("estimate" = estimate, "time" = (anMC::get_chronotime() - init_t) * 1e-9)
})
rs_chunks <- list(1:3, 4:6, 7:9, 10:12)
rs_estimates_budget <- replicate(reps, {
init_t <- anMC::get_chronotime()
estimate = recursive_estimate(mu, Sigma, thresh, rs_chunks,
budget = rep(.001, 4))
c("estimate" = estimate, "time" = (anMC::get_chronotime() - init_t) * 1e-9)
})
boxplot(unlist(ag_estimates_budget["estimate.estimate",]),
unlist(rs_estimates_budget["estimate.estimate",]),
main = "Estimated P(max X > t)",
names = c("2 split", "3 split"))
boxplot(unlist(ag_estimates_budget["time",]),
unlist(rs_estimates_budget["time",]),
main = "Runtimes",
names = c("2 split", "3 split"))
par(mfrow = c(1, 2))
boxplot(unlist(ag_estimates_budget["estimate.estimate",]),
unlist(rs_estimates_budget["estimate.estimate",]),
main = "Estimated P(max X > t)",
names = c("2 split", "3 split"))
boxplot(unlist(ag_estimates_budget["time",]),
unlist(rs_estimates_budget["time",]),
main = "Runtimes",
names = c("2 split", "3 split"))
par(mfrow = c(1, 2))
boxplot(unlist(ag_estimates_budget["estimate.estimate",]),
unlist(rs_estimates_budget["estimate.estimate",]),
main = "Estimated P(max X > t)",
names = c("1 split", "3 split"))
boxplot(unlist(ag_estimates_budget["time",]),
unlist(rs_estimates_budget["time",]),
main = "Runtimes",
names = c("1 split", "3 split"))
60 * (1-.67)
n = 13
source('~/TAMU/research/orthant/orthant-estimation/orthant.R')
source('~/TAMU/research/orthant/orthant-estimation/orthant.R')
i
adaptive_recursive_estimate(mu, Sigma, thresh)
mu <- rep(0, d)
Sigma <- diag(d)
reps <- 30
d <- 1000
thresh <- 3
mu <- rep(0, d)
Sigma <- diag(d)
adaptive_recursive_estimate(mu, Sigma, thresh)
adaptive_recursive_estimate(mu, Sigma, thresh, 300)
source('~/TAMU/research/orthant/orthant-estimation/orthant.R')
adaptive_recursive_estimate(mu, Sigma, thresh, 300)
1 - mvtnorm::pmvnorm(lower = rep(-Inf, d), upper = rep(thresh, d),
mean = mu, sigma = Sigma)
1 - .333
a <- list(1,2,3)
b <- list(2,3,4)
c(a, b)
c(a, c(1,2,3))
source('~/TAMU/research/orthant/orthant-estimation/orthant.R')
3
a
a = 3
a
attr(a)
attr(a, "chunks") <- c(1,2,3)
a
attr(a, "chunks")
source('~/TAMU/research/orthant/orthant-estimation/orthant.R')
adaptive_recursive_estimate(mu, Sigma, thresh, 300)
reps <- 30
d <- 500
thresh <- 3
mu <- rep(0, d)
Sigma <- diag(d)
adaptive_recursive_estimate(mu, Sigma, thresh, 500)
reps <- 30
d <- 100
thresh <- 3
mu <- rep(0, d)
Sigma <- diag(d)
adaptive_recursive_estimate(mu, Sigma, thresh, 100)
1 - mvtnorm::pmvnorm(lower = rep(-Inf, d), upper = rep(thresh, d),
mean = mu, sigma = Sigma)
reps <- 30
d <- 500
thresh <- 3
mu <- rep(0, d)
Sigma <- diag(d)
adaptive_recursive_estimate(mu, Sigma, thresh, 100)
source('~/TAMU/research/orthant/orthant-estimation/orthant.R')
?anMC::selectQdims
500 - 100
source('~/TAMU/research/orthant/orthant-estimation/orthant.R')
reps <- 30
d <- 500
thresh <- 3
mu <- rep(0, d)
Sigma <- diag(d)
adaptive_recursive_estimate(mu, Sigma, thresh, 100)
1 - mvtnorm::pmvnorm(lower = rep(-Inf, d), upper = rep(thresh, d),
mean = mu, sigma = Sigma)
1 - mvtnorm::pmvnorm(lower = rep(-Inf, d), upper = rep(thresh, d),
mean = mu, sigma = Sigma)
source('~/TAMU/research/orthant/orthant-estimation/orthant.R')
source('~/TAMU/research/orthant/orthant-estimation/orthant.R')
source('~/TAMU/research/orthant/orthant-estimation/orthant.R')
source('~/TAMU/research/orthant/orthant-estimation/orthant.R')
source('~/TAMU/research/orthant/orthant-estimation/orthant.R')
source('~/TAMU/research/orthant/orthant-estimation/orthant.R')
adaptive_recursive_estimate(mu, Sigma, thresh, 100)
1 - mvtnorm::pmvnorm(lower = rep(-Inf, d), upper = rep(thresh, d),
mean = mu, sigma = Sigma)
reps <- 30
d <- 1000
thresh <- 3
mu <- rep(0, d)
Sigma <- diag(d)
adaptive_recursive_estimate(mu, Sigma, thresh, 100)
reps <- 30
d <- 1000
thresh <- 3
mu <- rep(0, d)
Sigma <- diag(d)
adaptive_recursive_estimate(mu, Sigma, thresh, 500)
adaptive_recursive_estimate(mu, Sigma, thresh, 500)
source('~/TAMU/research/orthant/orthant-estimation/orthant.R')
adaptive_recursive_estimate(mu, Sigma, thresh, 500)
pq
pq_cond
intersect(pq_cond, ind_q)
source('~/TAMU/research/orthant/orthant-estimation/orthant.R')
source('~/TAMU/research/orthant/orthant-estimation/orthant.R')
adaptive_recursive_estimate(mu, Sigma, thresh, 500)
1 - mvtnorm::pmvnorm(lower = rep(-Inf, d), upper = rep(thresh, d),
mean = mu, sigma = Sigma)
source('~/TAMU/research/orthant/orthant-estimation/orthant.R')
adaptive_recursive_estimate(mu, Sigma, thresh, 500)
remain_q
ind_q
pq_next
estimate
complements
estimate
complements
pq_cond
remain_q
pq_target
chunks
chunks
append(chunks, pq_target)
pq_target
length(append(chunks, pq_target))
length(chunks)
chunks
c(chunks, list(pq_target))
source('~/TAMU/research/orthant/orthant-estimation/orthant.R')
source('~/TAMU/research/orthant/orthant-estimation/orthant.R')
estimate <- adaptive_recursive_estimate(mu, Sigma, thresh, 500)
source('~/TAMU/research/orthant/orthant-estimation/orthant.R')
estimate <- adaptive_recursive_estimate(mu, Sigma, thresh, 500)
estimate <- adaptive_recursive_estimate(mu, Sigma, thresh, 500, drop_remainder = TRUE)
estimate
1 - mvtnorm::pmvnorm(lower = rep(-Inf, d), upper = rep(thresh, d),
mean = mu, sigma = Sigma)
estimate <- adaptive_recursive_estimate(mu, Sigma, thresh, 800, drop_remainder = TRUE)
source('~/TAMU/research/orthant/orthant-estimation/orthant.R')
source('~/TAMU/research/orthant/orthant-estimation/orthant.R')
source('~/TAMU/research/orthant/orthant-estimation/orthant.R')
estimate <- adaptive_recursive_estimate(mu, Sigma, thresh, 800, drop_remainder = TRUE)
estimate <- adaptive_recursive_estimate(mu, Sigma, thresh, 100, 500,
drop_remainder = TRUE)
source('~/TAMU/research/orthant/orthant-estimation/orthant.R')
estimate <- adaptive_recursive_estimate(mu, Sigma, thresh, 100, 500,
drop_remainder = TRUE)
estimate
reference <- 1 - mvtnorm::pmvnorm(lower = rep(-Inf, d), upper = rep(thresh, d),
mean = mu, sigma = Sigma)
reference
estimate <- adaptive_recursive_estimate(mu, Sigma, thresh, 100, 500,
drop_remainder = FALSE)
estimate
reference
qnorm(.95)
q
prop
phat <- 1215 / 2000
se = sqrt(phat * (1 - phat) / 2000)
se
phat
phat + qnorm(.95) * se
phat <- 550 / 1000
se = sqrt(phat * (1 - phat) / 1000)
phat + qnorm(.95) * se
phat - qnorm(.95) * se
install.packages("learnr")
library(learnr)
grading_demo()
install.packages("gradethis")
7/23
3/12
7/23
14/46
?knitr::include_graphics
here
install.packages("here")
install.packages("jpeg")
76+22+38+6+52
76+22+38+6+52+18+50+5+27
76+22+38+6+52+18+50+5+27+42
library(swirl)
swirl()
c(z, 555, z)
z * 2 + 100
sqrt(z-1)
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
info()
my_div()
my_div
c(0, 10) + c(1, 2, 3, 4)
c(1, 2, 3 ,4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
swirl()
getwd()
ls()
x <- 9
ls()
dir()
?list.files
bye()
swirl()
x <- 5 + 7
x
y <- x - 3
y
c(1.1, 9, 3.144)
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?c
z
z <- c(z, 555, z)
c(z, 555, z)
z * 2 + 1000
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
swirl()\
swirl()
swirl()
getwd()
ls()
x <- 9
ls()
dir()
bye()
swirl()
(z * 2 + 100)
z * 2 + 100
z * 2 + 1000
my_div
X <- mvtnorm::rmvnorm(100, c(0, 0), diag(2))
X
Sigma <- matrix(c(1, -.3, -.3, 1), nrow = 2)
X <- mvtnorm::rmvnorm(100, c(0, 0), Sigma)
apply(X, 2, pnorm)
u <- apply(X, 2, pnorm)
u
hist(u[,1])
hist(u[,2])
?TruncatedNormal::qtnorm
Sigma <- matrix(c(1, -.3, -.3, 1), nrow = 2)
X <- mvtnorm::rmvnorm(100, c(0, 0), Sigma)
u <- apply(X, 2, pnorm)
y <- apply(u, 2, TruncatedNormal::qtnorm, lb = 0, ub = Inf)
y
plot(y)
y_direct <- TruncatedNormal::rtmvnorm(100, c(0, 0), Sigma, lb = c(0, 0),
ub = rep(Inf, 2))
plot(y, pch = 20)
points(y_direct)
?MASS::kde2d
MASS::kde2d(y[,1], y[,2])
y_kde <- MASS::kde2d(y[,1], y[,2])
library(ggplot2)
library(ggplot)
install.packages("ggplot2")
data.frame(y)
library(ggplot)
library(ggplot2)
ggplot(data.frame(y), aes(X1, X2)) + geom_density_2d
ggplot(data.frame(y), aes(X1, X2)) + geom_density_2d()
dat <- rbind(data.frame(y, "copula"), data.frame(y_direct, "actual"))
y
ggplot(data.frame(y), aes(X1, X2)) + geom_density_2d() +
geom_density_2d(data.frame(y_direct), aes(X1, X2))
ggplot(data.frame(y), aes(X1, X2)) + geom_density_2d() +
geom_density_2d(data = data.frame(y_direct), mapping = aes(X1, X2))
n <- 1000
n <- 1000
Sigma <- matrix(c(1, -.3, -.3, 1), nrow = 2)
X <- mvtnorm::rmvnorm(1000, c(0, 0), Sigma)
u <- apply(X, 2, pnorm)
y <- apply(u, 2, TruncatedNormal::qtnorm, lb = 0, ub = Inf)
y_direct <- TruncatedNormal::rtmvnorm(1000, c(0, 0), Sigma, lb = c(0, 0),
ub = rep(Inf, 2))
ggplot(data.frame(y), aes(X1, X2)) + geom_density_2d() +
geom_density_2d(data = data.frame(y_direct), mapping = aes(X1, X2))
ggplot(data.frame(y), aes(X1, X2)) + geom_density_2d(color = "red") +
geom_density_2d(data = data.frame(y_direct), mapping = aes(X1, X2))
plot(y, pch = 20)
points(y_direct)
?TruncatedNormal::qtnorm
install.packages("tmvtnorm")
warning("hi")
error("hi")
stop("hi")
```{r fig.width = 5, fig.height=3}
genre_scores <- films_v2 %>%
group_by(genre_1) %>%
summarize(median_score = median(rtscore))
barplot(genre_scores$median_score, names.arg = genre_scores$genre_1, las = 2,
main = "Median RT Score by Genre")
```
dnorm(0, log = TRUE)
pgamma(2191.5, 200, 1/10)
1 - pgamma(2191.5, 200, 1/10)
options(digits = 10)
1 - pgamma(2191.5, 200, 1/10)
options(digits = 2)
1 - pgamma(2191.5, 200, 1/10)
qnorm(.9, 44000, 6500)
setwd("~/research/PolytopeSamplerMatlab")
tictoc::tic
install.packages("tictoc")
n <- 1000
d <- 100
mu <- rep(0, d)
Sigma <- diag(d)
lb <- rep(0, d)
ub <- rep(Inf, d)
botev_samples <- TruncatedNormal::rtmvnorm(n, mu, Sigma, lb, ub)
botev_samples
dim(botev_samples)
install.packages("coda")
install.packages("R.matlab")
coda::effectiveSize(botev_samples)
coda::effectiveSize(t(botev_samples))
dim(botev_samples)
coda::effectiveSize(botev_samples)
install.packages("mcmcse")
?mcmcse::multiESS
mcmcse::multiESS(botev_samples)
dim(botev_samples)
mcmcse::multiESS(botev_samples)
d <- 1000
mu <- rep(0, d)
Sigma <- diag(d)
lb <- rep(0, d)
ub <- rep(Inf, d)
botev_samples <- TruncatedNormal::rtmvnorm(n, mu, Sigma, lb, ub)
mcmcse::multiESS(botev_samples)
mcmcse::ess(botev_samples)
coda::effectiveSize(botev_samples)
cor(botev_samples[,1])
acf(botev_samples)
install.packages("BDgraph")
install.packages("LaplacesDemon")
